<project xmlns:ivy="antlib:org.apache.ivy.ant" name="plexi" default="build"
  basedir=".">
  <description>Adaptor Library</description>
  <tstamp/>
  
  <!-- Load build environment specific properties. -->
  <property file="build.properties"/>

  <property name="compile.java.version" value="1.6"/>
  <property name="compile.java.bootclasspath" value="${build.bootclasspath}"/>
  <!-- The build.bootclasspath property, if set, must match the Java version
       set in compile.java.version. To detect errors in build.bootclasspath,
       set compile.java.newerClassname to a class that was added in
       the immediately following release of Java. For example, for
       "1.6", pick a class added in Java 7. -->
  <property name="compile.java.newerClassname" value="java.lang.AutoCloseable"/>

  <property name="src.dir" location="src"/>
  <property name="prebuilt.dir" location="prebuilt"/>
  <property name="test.dir" location="test"/>
  <property name="test.class" value="*Test"/>
  <property name="build.dir" location="build"/>
  <property name="build-src.dir" location="${build.dir}/src"/>
  <property name="build-test.dir" location="${build.dir}/test"/>
  <property name="build-instrument.dir" location="${build.dir}/instrument"/>
  <property name="dist.dir" location="dist"/>
  <property name="javadoc.dir" location="${build.dir}/javadoc"/>
  <property name="resource.dir" location="resources"/>
  <property name="test-resource.dir" location="test-resources"/>
  <property name="lib.dir" location="lib"/>
  <property name="adaptor.pkg.dir" value="com/google/enterprise/adaptor"/>
  <property name="adaptor.pkg.name" value="com.google.enterprise.adaptor"/>
  <property name="adaptor.class" 
      value="${adaptor.pkg.name}.examples.AdaptorTemplate"/>
  <property name="adaptor.args" value=""/>

  <!-- Ivy settings -->
  <property name="ivy.install.version" value="2.4.0" />
  <condition property="ivy.home" value="${env.IVY_HOME}">
    <isset property="env.IVY_HOME" />
  </condition>
  <property name="ivy.home" value="${user.home}/.ant" />
  <property name="ivy.jar.dir" value="${ivy.home}/lib" />
  <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />
  <property name="reports.dir" value="${build.dir}/report"/>

  <!-- Use add-modules with Java 9 and higher. -->
  <condition property="java.modules"
      value="" else="--add-modules java.xml.bind">
    <matches string="${ant.java.version}" pattern="^1\.[678]$"/>
  </condition>

  <path id="build.classpath">
    <fileset dir="${lib.dir}">
      <include name="gdata-core-1.0.jar"/>
      <include name="gdata-gsa-1.0.jar"/>
    </fileset>
    <path refid="ivy.compile"/>
  </path>

  <path id="run.classpath">
    <path refid="build.classpath"/>
    <pathelement location="${resource.dir}"/>
    <path refid="ivy.runtime"/>
  </path>

  <path id="test.classpath">
    <path refid="run.classpath"/>
    <path refid="ivy.test"/>
  </path>

  <path id="misc.classpath">
    <path refid="ivy.misc"/>
  </path>

  <target name="-check-instrument-uptodate">
    <uptodate property="instrument.uptodate"
      targetfile="${build-instrument.dir}/cobertura.ser">
      <srcfiles dir="${build-src.dir}"/>
    </uptodate>
  </target>

  <target name="build"
    depends="get-dependencies,-real-build,-check-instrument-uptodate,clean-instrument"
    description="Build source"/>

  <target name="-real-build">
    <mkdir dir="${build-src.dir}"/>

    <!-- Make sure that the build.bootclasspath isn't newer than expected. -->
    <available property="compile.java.isNewer"
      classname="${compile.java.newerClassname}"
      classpath="${compile.java.bootclasspath}" ignoresystemclasses="true"/>
    <fail if="compile.java.isNewer">
      Error: build.bootclasspath is newer than JDK ${compile.java.version}.
    </fail>

    <!-- Compile adaptorlib. -->
    <javac srcdir="${src.dir}" destdir="${build-src.dir}" debug="true"
      includeantruntime="false" encoding="utf-8"
      target="${compile.java.version}" source="${compile.java.version}">
      <!-- Do not suppress options warnings on this first call. -->
      <compilerarg line="-Xlint -Xlint:-path -Xlint:-serial"/>
      <bootclasspath path="${compile.java.bootclasspath}"/>
      <classpath refid="build.classpath"/>
      <exclude name="${adaptor.pkg.dir}/examples/**"/>
      <exclude name="${adaptor.pkg.dir}/experimental/**"/>
      <include name="${adaptor.pkg.dir}/**"/>
    </javac>

    <!-- Compile examples. -->
    <javac srcdir="${src.dir}" destdir="${build-src.dir}" debug="true"
           includeantruntime="false" encoding="utf-8"
           target="${compile.java.version}" source="${compile.java.version}">
      <compilerarg line="-Xlint -Xlint:-path -Xlint:-serial -Xlint:-options"/>
      <bootclasspath path="${compile.java.bootclasspath}"/>
      <classpath refid="misc.classpath"/>
      <include name="${adaptor.pkg.dir}/examples/**"/>
    </javac>

    <mkdir dir="${build-test.dir}"/>
    <!-- Compile JUnit helper -->
    <javac srcdir="${lib.dir}" destdir="${build-test.dir}" debug="true"
           includeantruntime="true" encoding="utf-8"
           target="${compile.java.version}" source="${compile.java.version}">
      <compilerarg line="-Xlint -Xlint:-path -Xlint:-serial -Xlint:-options"/>
      <bootclasspath path="${compile.java.bootclasspath}"/>
      <classpath refid="test.classpath"/>
      <include name="JUnitLogFixFormatter.java"/>
    </javac>

    <!-- Compile tests, excluding example and experimental tests. -->
    <javac srcdir="${test.dir}" destdir="${build-test.dir}" debug="true"
           includeantruntime="false" encoding="utf-8"
           target="${compile.java.version}" source="${compile.java.version}">
      <compilerarg line="-Xlint -Xlint:-path -Xlint:-serial -Xlint:-options"/>
      <bootclasspath path="${compile.java.bootclasspath}"/>
      <classpath location="${build-src.dir}"/>
      <classpath refid="test.classpath"/>
      <exclude name="${adaptor.pkg.dir}/examples/**"/>
      <exclude name="${adaptor.pkg.dir}/experimental/**"/>
    </javac>

    <!-- Compile tests for examples. -->
    <javac srcdir="${test.dir}" destdir="${build-test.dir}" debug="true"
           includeantruntime="false" encoding="utf-8"
           target="${compile.java.version}" source="${compile.java.version}">
      <compilerarg line="-Xlint -Xlint:-path -Xlint:-serial -Xlint:-options"/>
      <bootclasspath path="${compile.java.bootclasspath}"/>
      <classpath refid="misc.classpath"/>
      <classpath location="${build-src.dir}"/>
      <classpath refid="test.classpath"/>
      <include name="${adaptor.pkg.dir}/examples/**"/>
    </javac>

    <!-- Compile experimental code. -->
    <javac srcdir="${src.dir}" destdir="${build-src.dir}" debug="true"
           includeantruntime="false" encoding="utf-8"
           target="${compile.java.version}" source="${compile.java.version}">
      <compilerarg line="-Xlint -Xlint:-path -Xlint:-serial -Xlint:-options"/>
      <bootclasspath path="${compile.java.bootclasspath}"/>
      <classpath refid="build.classpath"/>
      <classpath refid="misc.classpath"/>
      <include name="${adaptor.pkg.dir}/experimental/**"/>
    </javac>

    <!-- Compile tests for experimental. -->
    <javac srcdir="${test.dir}" destdir="${build-test.dir}" debug="true"
           includeantruntime="false" encoding="utf-8"
           target="${compile.java.version}" source="${compile.java.version}">
      <compilerarg line="-Xlint -Xlint:-path -Xlint:-serial -Xlint:-options"/>
      <bootclasspath path="${compile.java.bootclasspath}"/>
      <classpath location="${build-src.dir}"/>
      <classpath refid="test.classpath"/>
      <include name="${adaptor.pkg.dir}/experimental/**"/>
    </javac>
  </target>

  <target name="-discover-version" unless="adaptorlib.version">
    <exec executable="git" outputproperty="adaptorlib.version"
      logError="true" failifexecutionfails="false">
      <arg value="describe"/>
      <arg value="--always"/>
    </exec>
    <!-- Set version if git describe failed. -->
    <property name="adaptorlib.version" value="unknown-${DSTAMP}"/>
  </target>

  <target name="dist" description="Generate distribution binaries"
    depends="clean,test,package"/>

  <target name="package" description="Generate binaries"
    depends="build,javadoc,-discover-version">
    <property name="dist.staging.dir" value="${build.dir}/dist/staging"/>

    <delete dir="${build.dir}/dist"/>
    <delete dir="${dist.dir}"/>

    <mkdir dir="${build.dir}/dist"/>
    <mkdir dir="${build.dir}/dist/staging"/>
    <mkdir dir="${build.dir}/dist/staging/examples"/>
    <mkdir dir="${dist.dir}"/>

    <!-- Set the file name suffix from the version. Add a leading dash,
         and strip a leading "v" prefix if it is followed by a digit. -->
    <loadresource property="adaptorlib.suffix">
      <propertyresource name="adaptorlib.version"/>
      <filterchain>
          <replaceregex pattern="^(v(?=\d))?" replace="-"/>
      </filterchain>
    </loadresource>

    <!-- Produce intermediate distribution files -->

    <copy file="LICENSE" todir="${dist.staging.dir}"/>
    <copy file="THIRDPARTYLICENSE.txt" todir="${dist.staging.dir}"/>

    <!-- adaptor.jar -->
    <jar destfile="${dist.staging.dir}/adaptor${adaptorlib.suffix}.jar"
      basedir="${build-src.dir}" excludes="${adaptor.pkg.dir}/examples/**">
      <manifest>
        <section name="com/google/enterprise/adaptor/">
          <attribute name="Implementation-Title" value="Adaptor Library"/>
          <attribute name="Implementation-Vendor" value="Google Inc."/>
          <attribute name="Implementation-Version"
            value="${adaptorlib.version}"/>
        </section>
      </manifest>
      <fileset dir="${resource.dir}"/>
    </jar>

    <!-- adaptor-src.jar -->
    <jar destfile="${dist.staging.dir}/adaptor${adaptorlib.suffix}-src.jar"
      basedir="${src.dir}" excludes="${adaptor.pkg.dir}/examples/**">
      <fileset dir="${resource.dir}"/>
    </jar>

    <!-- libraries (lib/* + Ivy-resolved dependencies) -->
    <!-- Concatenate dependent JARs together into a comma-delimited list. -->
    <pathconvert pathsep="," refid="run.classpath"
      property="tmp.adaptorlib.fileset">
      <!-- We remove the lib.dir from the paths to prevent trouble with comma
           and space in lib.dir. It also makes it nicer <echo>ing
           tmp.adaptorlib.fileset. -->
      <map from="${lib.dir}/" to=""/>
    </pathconvert>
    <copy todir="${dist.staging.dir}/lib">
      <fileset dir="${lib.dir}" includes="${tmp.adaptorlib.fileset}"/>
    </copy>
    <ivy:retrieve conf="compile,runtime"
      pattern="${dist.staging.dir}/lib/[artifact]-[revision].[ext]"/>

    <!-- adaptor-withlib.jar -->
    <jar destfile="${build.dir}/dist/adaptor-withlib.tmp.jar"
      filesetmanifest="mergewithoutmain">
      <!-- Provide an empty manifest to encourage mergewithoutmain to function.
           See https://issues.apache.org/bugzilla/show_bug.cgi?id=54171 . -->
      <manifest/>
      <zipfileset src="${dist.staging.dir}/adaptor${adaptorlib.suffix}.jar"/>
      <zipgroupfileset dir="${dist.staging.dir}/lib"/>
    </jar>
    <!-- Re-save JAR without signing keys, since keeping them in the JAR causes
         security exceptions. -->
    <zip destfile="${dist.staging.dir}/adaptor${adaptorlib.suffix}-withlib.jar">
      <zipfileset excludes="META-INF/**/*.DSA,META-INF/**/*.SF"
        src="${build.dir}/dist/adaptor-withlib.tmp.jar"/>
    </zip>

    <!-- adaptor-examples.jar -->
    <pathconvert pathsep="," refid="misc.classpath"
      property="tmp.examples.zipgroup">
      <map from="${lib.dir}/" to=""/>
    </pathconvert>
    <jar destfile="${dist.staging.dir}/examples/adaptor${adaptorlib.suffix}-examples.jar"
      basedir="${build-src.dir}" includes="${adaptor.pkg.dir}/examples/**">
      <manifest>
        <section name="com/google/enterprise/adaptor/examples/">
          <attribute name="Implementation-Title" value="Example Adaptors"/>
          <attribute name="Implementation-Vendor" value="Google Inc."/>
          <attribute name="Implementation-Version"
            value="${adaptorlib.version}"/>
        </section>
      </manifest>
      <zipgroupfileset dir="${lib.dir}" includes="${tmp.examples.zipgroup}"/>
      <fileset dir="${src.dir}"
        includes="${adaptor.pkg.dir}/examples/**/*.java"/>
    </jar>

    <!-- example Command Line Adaptor scripts -->
    <copy todir="${dist.staging.dir}">
      <fileset dir="${basedir}" includes="examples/*"/>
    </copy>

    <!-- adaptor-docs.zip -->
    <zip destfile="${dist.staging.dir}/adaptor${adaptorlib.suffix}-docs.zip"
      basedir="${javadoc.dir}"/>

    <!-- Produce final distribution files -->

    <!-- adaptor-src.zip -->
    <zip destfile="${dist.dir}/adaptor${adaptorlib.suffix}-src.zip"
      basedir="${basedir}">
      <exclude name="**/.*/**"/>

      <!-- Normal private files -->
      <exclude name="build/**"/>
      <exclude name="dist/**"/>
      <exclude name="adaptor-config.properties"/>
      <exclude name="cacerts.jks"/>
      <exclude name="keys.jks"/>
      <exclude name="adaptor.crt"/>
      <exclude name="gsa.crt"/>

      <!-- IntelliJ files -->
      <exclude name="workspace/**"/>
      <exclude name="classes/**"/>
      <exclude name=".idea"/>
      <exclude name="Plexi.iml"/>

      <!-- NetBeans files -->
      <exclude name="nbproject/**"/>
    </zip>

    <!-- adaptor-bin.zip -->
    <move file="${dist.staging.dir}"
      tofile="${build.dir}/dist/adaptor${adaptorlib.suffix}"/>
    <zip destfile="${dist.dir}/adaptor${adaptorlib.suffix}-bin.zip"
      basedir="${build.dir}/dist/adaptor${adaptorlib.suffix}"/>
  </target>

  <!-- Build stand-alone AdaptorTemplate.jar for testing purposes. -->
  <target name="adaptor-template" description="AdaptorTemplate jar"
    depends="package">
    <jar destfile="${build.dir}/dist/adaptor${adaptorlib.suffix}/AdaptorTemplate.jar"
      basedir="${build-src.dir}"
      includes="${adaptor.pkg.dir}/**/AdaptorTemplate.class">
      <manifest>
        <attribute name="Implementation-Title" value="Adaptor Template"/>
        <attribute name="Implementation-Vendor" value="Google Inc."/>
        <attribute name="Implementation-Version"
          value="${adaptorlib.version}"/>
        <attribute name="Main-Class"
          value="com.google.enterprise.adaptor.examples.AdaptorTemplate" />
        <attribute name="Class-Path"
          value="adaptor${adaptorlib.suffix}-withlib.jar" />
      </manifest>
    </jar>
  </target>

  <target name="-javadoc-test-uptodate">
    <uptodate property="javadoc.uptodate"
      targetfile="${javadoc.dir}/index.html">
      <srcfiles dir="${src.dir}"/>
    </uptodate>
  </target>

  <target name="javadoc" description="Build JavaDocs"
    depends="-javadoc-test-uptodate" unless="javadoc.uptodate">
    <javadoc sourcepath="${src.dir}" destdir="${javadoc.dir}"
        overview="${src.dir}/overview.html"
        packagenames="${adaptor.pkg.name},${adaptor.pkg.name}.**">
      <classpath refid="build.classpath"/>
      <classpath refid="misc.classpath"/>
      <link href="https://docs.oracle.com/javase/6/docs/jre/api/net/httpserver/spec/"/>
      <link href="https://docs.oracle.com/javase/6/docs/api/"/>
      <link href="http://commons.apache.org/proper/commons-daemon/apidocs/"/>
      <arg line="${java.modules}"/>
      <arg value="-quiet"/>
      <arg value="-notimestamp"/>
    </javadoc>
  </target>

  <target name="clean" description="Remove build output">
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
  </target>

  <target name="run" depends="build" description="Run default adaptor">
    <java classpath="${build-src.dir}" fork="true" classname="${adaptor.class}">
      <jvmarg line="${java.modules}"/>
      <classpath refid="run.classpath"/>
      <sysproperty key="java.util.logging.config.file"
        value="logging.properties"/>
      <sysproperty key="javax.net.ssl.keyStore" file="keys.jks"/>
      <sysproperty key="javax.net.ssl.keyStoreType" value="jks"/>
      <sysproperty key="javax.net.ssl.keyStorePassword" value="changeit"/>
      <sysproperty key="javax.net.ssl.trustStore" file="cacerts.jks"/>
      <sysproperty key="javax.net.ssl.trustStoreType" value="jks"/>
      <sysproperty key="javax.net.ssl.trustStorePassword" value="changeit"/>
      <arg line="${adaptor.args}"/>
    </java>
  </target>

  <target name="groups_writer" depends="build" description="Run groups writer">
    <java classpath="${build-src.dir}" fork="true"
      classname="${adaptor.pkg.name}.examples.GroupDefinitionsWriter">
      <jvmarg line="${java.modules}"/>
      <classpath refid="run.classpath"/>
      <sysproperty key="java.util.logging.config.file"
        value="logging.properties"/>
      <sysproperty key="javax.net.ssl.keyStore" file="keys.jks"/>
      <sysproperty key="javax.net.ssl.keyStoreType" value="jks"/>
      <sysproperty key="javax.net.ssl.keyStorePassword" value="changeit"/>
      <sysproperty key="javax.net.ssl.trustStore" file="cacerts.jks"/>
      <sysproperty key="javax.net.ssl.trustStoreType" value="jks"/>
      <sysproperty key="javax.net.ssl.trustStorePassword" value="changeit"/>
      <arg line="${adaptor.args}"/>
    </java>
  </target>

  <target name="groups_from_csv" depends="build"
      description="Run groups from csv">
    <java classpath="${build-src.dir}" fork="true"
      classname="${adaptor.pkg.name}.examples.GroupDefinitionsFromCsv">
      <jvmarg line="${java.modules}"/>
      <classpath refid="run.classpath"/>
      <sysproperty key="java.util.logging.config.file"
        value="logging.properties"/>
      <sysproperty key="javax.net.ssl.keyStore" file="keys.jks"/>
      <sysproperty key="javax.net.ssl.keyStoreType" value="jks"/>
      <sysproperty key="javax.net.ssl.keyStorePassword" value="changeit"/>
      <sysproperty key="javax.net.ssl.trustStore" file="cacerts.jks"/>
      <sysproperty key="javax.net.ssl.trustStoreType" value="jks"/>
      <sysproperty key="javax.net.ssl.trustStorePassword" value="changeit"/>
      <arg line="${adaptor.args}"/>
    </java>
  </target>

  <target name="groups_scale_tester" depends="build"
      description="Run groups scale tester">
    <java classpath="${build-src.dir}" fork="true"
      classname="${adaptor.pkg.name}.examples.GroupDefinitionsScaleTester">
      <jvmarg line="${java.modules}"/>
      <classpath refid="run.classpath"/>
      <sysproperty key="java.util.logging.config.file"
        value="logging.properties"/>
      <sysproperty key="javax.net.ssl.keyStore" file="keys.jks"/>
      <sysproperty key="javax.net.ssl.keyStoreType" value="jks"/>
      <sysproperty key="javax.net.ssl.keyStorePassword" value="changeit"/>
      <sysproperty key="javax.net.ssl.trustStore" file="cacerts.jks"/>
      <sysproperty key="javax.net.ssl.trustStoreType" value="jks"/>
      <sysproperty key="javax.net.ssl.trustStorePassword" value="changeit"/>
      <arg line="${adaptor.args}"/>
    </java>
  </target>

  <target name="sim" depends="build" description="run simulator">
    <java classpath="${build-src.dir}" fork="true"
        classname="com.google.enterprise.adaptor.experimental.Sim">
      <classpath refid="run.classpath"/>
      <classpath refid="misc.classpath"/>
      <sysproperty key="java.util.logging.config.file"
        value="logging.properties"/>
    </java>
  </target>

  <target name="coverage" depends="instrument,test,coverage-report"
    description="Run instrumented tests and generate coverage report"/>

  <target name="test" depends="build" description="Run JUnit tests">
    <junit printsummary="yes" haltonfailure="yes" forkmode="once" fork="true"
      dir="${basedir}" maxmemory="512m">
      <jvmarg line="${java.modules}"/>
      <sysproperty key="net.sourceforge.cobertura.datafile"
        file="${build-instrument.dir}/cobertura.ser"/>
      <classpath refid="misc.classpath"/>
      <classpath refid="test.classpath"/>
      <classpath refid="ivy.buildtools"/>
      <classpath location="${build-instrument.dir}"/>
      <classpath location="${build-src.dir}"/>
      <classpath location="${build-test.dir}"/>
      <classpath location="${resource.dir}"/>
      <classpath location="${test-resource.dir}"/>
      <formatter type="plain" usefile="false"/>
      <formatter classname="JUnitLogFixFormatter" usefile="false"/>
      <batchtest>
        <fileset dir="${test.dir}">
          <include name="**/${test.class}.java"/>
          <exclude name="**/experimental/**"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="sim-test" depends="build">
    <junit printsummary="yes" haltonfailure="yes" forkmode="once" fork="true"
      dir="${basedir}" maxmemory="512m">
      <classpath refid="test.classpath"/>
      <classpath location="${build-src.dir}"/>
      <classpath location="${build-test.dir}"/>
      <classpath refid="misc.classpath"/>
      <formatter type="plain" usefile="false"/>
      <formatter classname="JUnitLogFixFormatter" usefile="false"/>
      <batchtest>
        <fileset dir="${test.dir}">
          <include name="**/experimental/SimTest.java"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="instrument" depends="build" description="Instrument classes">
    <taskdef classpathref="ivy.buildtools" resource="tasks.properties"/>
    <cobertura-instrument datafile="${build-instrument.dir}/cobertura.ser"
      todir="${build-instrument.dir}">
      <fileset dir="${build-src.dir}">
        <include name="${adaptor.pkg.dir}/**"/>
      </fileset>
    </cobertura-instrument>
  </target>

  <target name="clean-instrument" unless="instrument.uptodate"
    description="Delete instrumented classes">
    <delete dir="${build-instrument.dir}"/>
  </target>

  <target name="coverage-report" description="Generates code coverage report">
    <taskdef classpathref="ivy.buildtools" resource="tasks.properties"/>
    <cobertura-report datafile="${build-instrument.dir}/cobertura.ser"
      srcdir="${src.dir}" destdir="${build.dir}/coverage"/>
  </target>

  <!-- Ivy targets -->
  <target name="download-ivy" unless="offline">
    <mkdir dir="${ivy.jar.dir}"/>
    <!-- Auto-download Ivy -->
    <get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
      dest="${ivy.jar.file}" usetimestamp="true"/>
  </target>
	
	<target name="init-ivy" depends="download-ivy">
    <path id="ivy.lib.path">
      <fileset dir="${ivy.jar.dir}" includes="*.jar" />
    </path>
    <taskdef resource="org/apache/ivy/ant/antlib.xml"
      uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
  </target>

  <target name="get-dependencies" depends="init-ivy"
    description="Download dependencies and setup classpaths">
    <ivy:resolve/>
    <ivy:report todir='${reports.dir}/ivy' graph='false' xml='false'/>

    <ivy:cachepath pathid="ivy.compile" conf="compile"/>
    <ivy:cachepath pathid="ivy.runtime" conf="runtime"/>
    <ivy:cachepath pathid="ivy.test" conf="test"/>
    <ivy:cachepath pathid="ivy.misc" conf="misc"/>
    <ivy:cachepath pathid="ivy.buildtools" conf="buildtools"/>
  </target>

  <!-- Eclipse: run 'ant eclipse' to generate Eclipse project files -->
  <target name="eclipse" depends="get-dependencies,clean-eclipse">
    <taskdef name="eclipse" classname="prantl.ant.eclipse.EclipseTask"
      classpathref="ivy.buildtools" />
    <eclipse mode="java">
      <project name="gsa-adaptors-library"/>
      <classpath>
        <output path="build/"/>
        <source path="${src.dir}" output="build/src"/>
        <source path="${test.dir}" output="build/test"/>
        <library pathref="test.classpath"/>
        <library pathref="misc.classpath"/>
        <library path="${resource.dir}"/>
        <library path="${test-resource.dir}"/>
      </classpath>
    </eclipse>
  </target>

  <target name="clean-eclipse">
    <delete dir="bin" includeEmptyDirs="true"/>
    <delete file=".classpath"/>
    <delete file=".project"/>
  </target>

  <target name="clean-all" 
    depends="init-ivy,clean,clean-instrument,clean-eclipse"
    description="deep clean, purge ivy cache">
    <ivy:cleancache/>
  </target>
</project>
